"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/zpp.ts
var zpp_exports = {};
__export(zpp_exports, {
  zpp: () => zpp
});
module.exports = __toCommonJS(zpp_exports);
var import_endent = __toESM(require("endent"));
var import_zod_to_json_schema = require("zod-to-json-schema");
function zpp(schema) {
  const newFunc = (obj) => {
    return obj;
  };
  const parseJson = (data) => {
    if (typeof data === "string") {
      return schema.parse(JSON.parse(data));
    }
    if (typeof data === "object") {
      return schema.parse(data);
    }
    throw new Error("Invalid data type");
  };
  const parseJsonAsync = async (data) => {
    if (typeof data === "string") {
      return schema.parseAsync(JSON.parse(data));
    }
    if (typeof data === "object") {
      return schema.parseAsync(data);
    }
    throw new Error("Invalid data type");
  };
  const stringify = (data) => {
    return JSON.stringify(data);
  };
  const parseJsonSafe = (data) => {
    if (typeof data === "string") {
      try {
        return schema.safeParse(JSON.parse(data));
      } catch (err) {
        return schema.safeParse(data);
      }
    }
    if (typeof data === "object") {
      return schema.safeParse(data);
    }
    throw new Error("Invalid data type");
  };
  const outputPrompt = (objectSchema) => {
    let output = "{";
    const keys = Object.keys(objectSchema.shape);
    for (const key of keys) {
      const shape = objectSchema.shape[key];
      if (!shape)
        throw new Error("Invalid Shape");
      const def = shape._def;
      if (def.typeName === "ZodObject") {
        output = `${output}
"${key}": ${outputPrompt(shape)}`;
        continue;
      }
      let typeName = def.typeName;
      if (typeName === "ZodOptional") {
        typeName = def.innerType._def.typeName;
      }
      const describe = def.description;
      switch (typeName) {
        case "ZodString":
          output = `${output}
"${key}": ${describe ? `"${describe}"` : "string"},`;
          break;
        case "ZodNumber":
          output = `${output}
"${key}": number${describe ? ` // ${describe}` : ""},`;
          break;
        case "ZodBoolean":
          output = `${output}
"${key}": boolean${describe ? ` // ${describe}` : ""},`;
          break;
      }
    }
    output = output.replace(/,\s*$/, "");
    output = import_endent.default`${output}\n}`;
    return output;
  };
  const toOpenAiFuncSchema = () => {
    return (0, import_zod_to_json_schema.zodToJsonSchema)(schema);
  };
  const newSchema = Object.assign(schema, {
    new: newFunc,
    jsonParse: parseJson,
    jsonParseSafe: parseJsonSafe,
    jsonParseAsync: parseJsonAsync,
    toPrompt: () => {
      if (schema._def.typeName !== "ZodObject")
        throw new Error("Cannot use toPrompt on non-object schema");
      return outputPrompt(schema);
    },
    stringify,
    toOpenAiFuncSchema
  });
  return newSchema;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zpp
});
//# sourceMappingURL=zpp.js.map