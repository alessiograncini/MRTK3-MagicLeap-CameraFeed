import { z } from 'zod';
import { JsonSchema7Type } from 'zod-to-json-schema/src/parseDef.js';

interface ZodExtraMethods<In, Out, T extends z.ZodType<Out, z.ZodTypeDef, In>> {
    new: (obj: z.infer<T>) => z.infer<T>;
    jsonParse: (data: unknown) => z.infer<T>;
    jsonParseAsync: (data: unknown) => Promise<z.infer<T>>;
    jsonParseSafe: (data: unknown) => z.SafeParseReturnType<In, Out>;
    toPrompt: () => string;
    stringify: (data: z.infer<T>) => string;
    toOpenAiFuncSchema: () => JsonSchema7Type & {
        $schema?: string | undefined;
        definitions?: Record<string, JsonSchema7Type> | undefined;
    };
}
type ExtendedZodType<T extends z.ZodType<any, any>> = T & ZodExtraMethods<InType<T>, OutType<T>, T>;
type InType<T> = T extends z.ZodType<any, any, infer In> ? In : never;
type OutType<T> = T extends z.ZodType<infer Out, any, any> ? Out : never;
declare function zpp<T extends z.ZodObject<any, any, any, any, any>>(schema: T): ExtendedZodType<T>;
declare function zpp<T extends z.ZodDiscriminatedUnion<any, any>>(schema: T): ExtendedZodType<T>;
declare function zpp<T extends z.ZodType<any, any>>(schema: T): ExtendedZodType<T>;

export { ExtendedZodType, zpp };
